#!/usr/bin/env ruby

def get_current_branch()
    (`git branch --no-color | awk '$1 == "*" {print $2}'`).intern
end


if ARGV.length == 0
    puts %{Script for rubyzome developper to dodge git merge error"
    
usage: $0:t [git_command or local_command]
    
local commands:
    allmerges: merge from top to down}
    exit 0
end


# architecture
#
# master <-> rubyzome
# master -> grid
# grid -> gp | gpadm
#
# merge using two of these branches should be 
#   restricted to these rules
# merge to one of these branch and an unknown one should
#   raise a warning.
$architecture={ 
    :master => [ :rubyzome, :grid ],
    :rubyzome => [ :master ],
    :grid => [ :gp, :gpadm ] }

require 'set'
$known_branches=Set.new
$architecture.each do |k,v| 
    $known_branches.add(k)
    v.each { |b| $known_branches.add(b) }
end

def do_all_merges
    puts 'do_all_merges'
end

def do_merge
    current_branch=get_current_branch
    puts %{do_merge: #{ARGV[1]} => #{current_branch}}
    if $known_branches.include?(current_branch)
        puts 'I know current branch'
    end
end

case ARGV[0] 
    when 'allmerges' then do_all_merges
    when 'merge' then do_merge
    else puts(%{git #{ARGV}})
end
